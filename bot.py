import os
import sys
import config
import pyromod.listen
from pyrogram import Client, enums
from pyrogram.enums import ParseMode
from datetime import datetime
from config import LOGGER, FORCE_SUB_CHANNEL, CHANNEL_ID


class Bot(Client):
    def __init__(self):
        super().__init__(
            name="TheFunkyFox",
            api_hash=config.API_HASH,
            api_id=config.API_ID,
            plugins={
                "root": "TheFunkyFox"
            },
            workers=config.BOT_WORKERS,
            bot_token=config.BOT_TOKEN
        )
        self.LOGGER = LOGGER

    async def start(self):
        await super().start()
        usr_bot_me = await self.get_me()
        self.uptime = datetime.now()

        if FORCE_SUB_CHANNEL:
            try:
                link = (await self.get_chat(FORCE_SUB_CHANNEL)).invite_link
                if not link:
                    await self.export_chat_invite_link(FORCE_SUB_CHANNEL)
                    link = (await self.get_chat(FORCE_SUB_CHANNEL)).invite_link
                self.invitelink = link
            except Exception as a:
                self.LOGGER(__name__).warning(a)
                self.LOGGER(__name__).warning("¬ª  ô·¥è…¥·¥õ ·¥Ñ·¥Ä…¥'·¥õ ·¥áx·¥ò·¥è Ä·¥õ …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã “ì Ä·¥è·¥ç “ì·¥è Ä·¥Ñ·¥á s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü !")
                self.LOGGER(__name__).warning(f"·¥ò ü·¥á·¥Äs·¥á ·¥Ö·¥è·¥ú ô ü·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á FORCE_SUB_CHANNEL ·¥†·¥Ä ü·¥ú·¥á ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á  ô·¥è·¥õ …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥°…™·¥õ ú …™…¥·¥†…™·¥õ·¥á ·¥ús·¥á Äs ·¥†…™·¥Ä  ü…™…¥·¥ã ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥, ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ “ì·¥è Ä·¥Ñ·¥á s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†·¥Ä ü·¥ú·¥á: {FORCE_SUB_CHANNEL}")
                self.LOGGER(__name__).info("\n‚Ä¢‚Ä¢‚Ä¢  ô·¥è·¥õ s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö ‚Ä¢‚Ä¢‚Ä¢")
                sys.exit()
        try:
            db_channel = await self.get_chat(CHANNEL_ID)
            self.db_channel = db_channel
            test = await self.send_message(chat_id = db_channel.id, text = "Test Message")
            await test.delete()
        except Exception as e:
            self.LOGGER(__name__).warning(e)
            self.LOGGER(__name__).warning(f"·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á  ô·¥è·¥õ …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü, ·¥Ä…¥·¥Ö ·¥Ö·¥è·¥ú ô ü·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á CHANNEL_ID ·¥†·¥Ä ü·¥ú·¥á, ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥†·¥Ä ü·¥ú·¥á {CHANNEL_ID}")
            self.LOGGER(__name__).info("\n‚Ä¢‚Ä¢‚Ä¢  ô·¥è·¥õ s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö ‚Ä¢‚Ä¢‚Ä¢")
            sys.exit()

        self.set_parse_mode(ParseMode.HTML)
        self.LOGGER(__name__).info(f" ô·¥è·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á·¥ò ü·¥è è·¥á·¥Ö üçé")
        self.username = usr_bot_me.username

    async def stop(self, *args):
        await super().stop()
        self.LOGGER(__name__).info("‚Ä¢‚Ä¢‚Ä¢  ô·¥è·¥õ s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö ‚Ä¢‚Ä¢‚Ä¢")
