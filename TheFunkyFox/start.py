import os
import asyncio
from bot import Bot
from pyrogram import Client, filters, __version__, enums
from pyrogram.enums import ParseMode
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import FloodWait, UserIsBlocked, InputUserDeactivated
from config import OWNER_ID, CUSTOM_CAPTION, DISABLE_CHANNEL_BUTTON, PROTECT_CONTENT
from TheFunkyFox.helper_func import subscribed, encode, decode, get_messages
from TheFunkyFox.database.sql import add_user, query_msg, full_userbase


# ---------------------- ·¥õ ú·¥á-“ì·¥ú…¥·¥ã è-“ì·¥èx- ô·¥è·¥õ-·¥õ·¥áx·¥õ ---------------------- #

WAIT_MSG = """"<b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ...</b>"""

REPLY_ERROR = """<code>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Äs ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™·¥õ ú ·¥è·¥ú·¥õ ·¥Ä…¥ è s·¥ò·¥Ä·¥Ñ·¥ás.</code>"""

START_MSG = """
 ú·¥á ü ü·¥è {first}\n
‡πè …™ ·¥Ä·¥ç ·¥õ ú·¥á “ì·¥ú…¥·¥ã è “ì·¥èx ·¥Ä…¥·¥Ö …™  ú·¥Ä·¥†·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás
‡πè …™ ·¥Ñ·¥Ä…¥ s·¥õ·¥è Ä·¥á ·¥ò·¥ès·¥õs ·¥Ä…¥·¥Ö ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õs ·¥Ä…¥·¥Ö …™·¥õ ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ñ·¥Ñ·¥áss  ô è s·¥ò·¥á·¥Ñ…™·¥Ä ü  ü…™…¥·¥ãs 

‡πè ·¥ä·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥è…¥ ·¥Ä ü ü ·¥õ ú·¥á  ü·¥Ä·¥õ·¥ás·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás.
"""

FORCE_MSG = """
 ú·¥á è {first} \n
·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á  è·¥è·¥ú'·¥†·¥á …¥·¥è·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥á·¥õ, …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á ·¥õ ú·¥á…¥ ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ ·¥ç·¥á ·¥Ä…¢·¥Ä…™…¥ !
"""

# ---------------------- ·¥õ ú·¥á-“ì·¥ú…¥·¥ã è-“ì·¥èx- ô·¥è·¥õ-·¥õ·¥áx·¥õ ---------------------- #


@Bot.on_message(filters.command('start') & filters.private & subscribed)
async def start_command(client: Client, message: Message):
    id = message.from_user.id
    user_name = '@' + message.from_user.username if message.from_user.username else None
    try:
        await add_user(id, user_name)
    except:
        pass
    text = message.text
    if len(text)>7:
        try:
            base64_string = text.split(" ", 1)[1]
        except:
            return
        string = await decode(base64_string)
        argument = string.split("-")
        if len(argument) == 3:
            try:
                start = int(int(argument[1]) / abs(client.db_channel.id))
                end = int(int(argument[2]) / abs(client.db_channel.id))
            except:
                return
            if start <= end:
                ids = range(start,end+1)
            else:
                ids = []
                i = start
                while True:
                    ids.append(i)
                    i -= 1
                    if i < end:
                        break
        elif len(argument) == 2:
            try:
                ids = [int(int(argument[1]) / abs(client.db_channel.id))]
            except:
                return
        temp_msg = await message.reply("·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...")
        try:
            messages = await get_messages(client, ids)
        except:
            await message.reply_text("¬ª s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢..!")
            return
        await temp_msg.delete()

        for msg in messages:

            if bool(CUSTOM_CAPTION):
                caption = CUSTOM_CAPTION.format(file_caption = "" if not msg.caption else msg.caption.html)
            else:
                caption = "" if not msg.caption else msg.caption.html

            if DISABLE_CHANNEL_BUTTON:
                reply_markup = msg.reply_markup
            else:
                reply_markup = None

            try:
                await msg.copy(chat_id=message.from_user.id, caption = caption, parse_mode = ParseMode.HTML, reply_markup = reply_markup, protect_content=PROTECT_CONTENT)
                await asyncio.sleep(0.5)
            except FloodWait as e:
                await asyncio.sleep(e.value)
                await msg.copy(chat_id=message.from_user.id, caption = caption, parse_mode = ParseMode.HTML, reply_markup = reply_markup, protect_content=PROTECT_CONTENT)
            except:
                pass
        return
    else:
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üçí ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url = "https://t.me/TheMoviesUpdate"),
                    InlineKeyboardButton("üîê ·¥Ä ô·¥è·¥ú·¥õ", callback_data = "about"),
                    InlineKeyboardButton("üçª s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url = "https://t.me/TheMoviesRequests")
                ],
                [                    
                    InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü·¥ès·¥á", callback_data = "close")
                ]
            ]
        )
        await message.reply_text(
            text = START_MSG.format(
                first = message.from_user.first_name,
                last = message.from_user.last_name,
                username = None if not message.from_user.username else '@' + message.from_user.username,
                mention = message.from_user.mention,
                id = message.from_user.id
            ),
            reply_markup = reply_markup,
            disable_web_page_preview = True,
            quote = True
        )
        return

@Bot.on_message(filters.command('start') & filters.private)
async def not_joined(client: Client, message: Message):
    buttons = [
        [
            InlineKeyboardButton(
                "·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü",
                url = client.invitelink)
        ]
    ]
    try:
        buttons.append(
            [
                InlineKeyboardButton(
                    text = '·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥',
                    url = f"https://t.me/{client.username}?start={message.command[1]}"
                )
            ]
        )
    except IndexError:
        pass

    await message.reply(
        text = FORCE_MSG.format(
                first = message.from_user.first_name,
                last = message.from_user.last_name,
                username = None if not message.from_user.username else '@' + message.from_user.username,
                mention = message.from_user.mention,
                id = message.from_user.id
            ),
        reply_markup = InlineKeyboardMarkup(buttons),
        quote = True,
        disable_web_page_preview = True
    )

@Bot.on_message(filters.command('users') & filters.private & filters.user(OWNER_ID))
async def get_users(client: Bot, message: Message):
    msg = await client.send_message(chat_id=message.chat.id, text=WAIT_MSG)
    users = await full_userbase()
    await msg.edit(f"{len(users)} | ·¥ús·¥á Äs ·¥Ä Ä·¥á ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ")

@Bot.on_message(filters.private & filters.command('broadcast') & filters.user(OWNER_ID))
async def send_text(client: Bot, message: Message):
    if message.reply_to_message:
        query = await query_msg()
        broadcast_msg = message.reply_to_message
        total = 0
        successful = 0
        blocked = 0
        deleted = 0
        unsuccessful = 0
        
        pls_wait = await message.reply("<i>  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á.. \n·¥õ ú…™s ·¥°…™ ü ü ·¥õ·¥Ä·¥ã·¥á s·¥è·¥ç·¥á ·¥õ…™·¥ç·¥á</i>")
        for row in query:
            chat_id = int(row[0])
            try:
                await broadcast_msg.copy(chat_id)
                successful += 1
            except FloodWait as e:
                await asyncio.sleep(e.value)
                await broadcast_msg.copy(chat_id)
                successful += 1
            except UserIsBlocked:
                blocked += 1
            except InputUserDeactivated:
                deleted += 1
            except:
                unsuccessful += 1
                pass
            total += 1
        
        status = f"""<b><u>üçí  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö</u>

üîê ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs ‚û† <code>{total}</code>
üçª s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü.‚û† <code>{successful}</code>
üçí  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs ‚û† <code>{blocked}</code>
‚ôªÔ∏è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs ‚û† <code>{deleted}</code>
üêù ·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü ‚û† <code>{unsuccessful}</code></b>"""
        
        return await pls_wait.edit(status)

    else:
        msg = await message.reply(REPLY_ERROR)
        await asyncio.sleep(8)
        await msg.delete()
